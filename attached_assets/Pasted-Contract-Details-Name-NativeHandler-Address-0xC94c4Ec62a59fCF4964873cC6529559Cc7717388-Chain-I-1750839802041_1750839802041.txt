Contract Details:
Name: NativeHandler
Address: 0xC94c4Ec62a59fCF4964873cC6529559Cc7717388
Chain ID: 88888
Blockchain: Chiliz Chain
Read-only Functions:
_bridgeAddress()

Returns: address
Description: Returns the address of the associated bridge contract.
_burnList(address)

Returns: bool
Description: Checks if a given address is marked as burnable.
_contractWhitelist(address)

Returns: bool
Description: Checks if an address is included in the contract whitelist.
_depositRecords(uint8, uint64)

Returns: (address, uint8, uint8, bytes32, bytes, address, uint256)
Description: Retrieves deposit record information by chain ID and deposit nonce.
_resourceIDToTokenContractAddress(bytes32)

Returns: address
Description: Returns the contract address mapped to a given resource ID.
_tokenContractAddressToResourceID(address)

Returns: bytes32
Description: Returns the resource ID for a given token contract address.
getDepositRecord(uint64, uint8)

Returns: tuple
Description: Fetches a deposit record for a given deposit nonce and destination chain ID.
Write-able Functions:
deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes data)

Returns: None
Description: Makes a deposit operation, possibly involving native assets or token transfers.
Payable: true
Parameters:
resourceID bytes32: ID used to identify the asset/resource
destinationChainID uint8: Chain ID of the destination
depositNonce uint64: Unique deposit identifier
depositer address: Address making the deposit
data bytes: Additional deposit data
executeProposal(bytes32 resourceID, bytes data)

Returns: None
Description: Executes proposals, typically from the bridge for cross-chain operations.
Payable: false
Parameters:
resourceID bytes32: Resource being acted upon
data bytes: Proposal data
setBurnable(address contractAddress)

Returns: None
Description: Marks a token contract address as burnable for bridge operations.
Payable: false
Parameters:
contractAddress address: Token contract to set as burnable
setResource(bytes32 resourceID, address contractAddress)

Returns: None
Description: Associates a resource ID with a contract address.
Payable: false
Parameters:
resourceID bytes32: Resource ID to set
contractAddress address: Address to map to the resource
withdraw(address recipient, uint256 amount)

Returns: None
Description: Withdraws native tokens to a recipient address.
Payable: false
Parameters:
recipient address: Address to receive funds
amount uint256: Amount to withdraw
withdrawToken(address tokenAddress, address recipient, uint256 amountOrTokenID)

Returns: None
Description: Withdraws ERC20/ERC721/ERC1155 tokens to a designated recipient.
Payable: false
Parameters:
tokenAddress address: Address of the token
recipient address: Address to receive the token
amountOrTokenID uint256: Amount or token ID (depends on token standard)
receive()

Returns: None
Description: Handles direct receipt of native tokens.
Payable: true
Parameters: None
constructor(address bridgeAddress, bytes32[] initialResourceIDs, address[] initialContractAddresses)

Returns: None
Description: Initializes contract with bridge address and resource mappings.
Payable: false
Parameters:
bridgeAddress address: Bridge contract address
initialResourceIDs bytes32[]: Initial resource IDs
initialContractAddresses address[]: Initial contract addresses
If you need more granular descriptions for specific functions or want additional interface analysis, let me know!